version: "3.8"

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    entrypoint: ["/bin/sh", "./start-server.sh"]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
    env_file:
      - stack.env
    depends_on:
      - redis
      - database
      - typesense
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:release
    deploy:
      resources:
        limits:
          cpus: "2"
    entrypoint: ["/bin/sh", "./start-microservices.sh"]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /mnt/ssd/immich/temp-processing:/exifprocess
    env_file:
      - stack.env
    depends_on:
      - redis
      - database
      - typesense
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    deploy:
      resources:
        limits:
          cpus: "2"
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - ${IMMICH_DATA_PATH}/model-cache:/cache
    env_file:
      - stack.env
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  immich-web:
    container_name: immich_web
    image: ghcr.io/immich-app/immich-web:release
    deploy:
      resources:
        limits:
          cpus: "1"
    entrypoint: ["/bin/sh", "./entrypoint.sh"]
    env_file:
      - stack.env
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  typesense:
    container_name: immich_typesense
    image: typesense/typesense:0.24.0
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
    logging:
      driver: none
    volumes:
      - ${IMMICH_DATA_PATH}/tsdata:/data
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  redis:
    container_name: immich_redis
    image: redis:6.2
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  database:
    container_name: immich_postgres
    image: postgres:14
    env_file:
      - stack.env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - ${IMMICH_DATA_PATH}/pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - proxy
    labels:
      - com.centurylinklabs.watchtower.enable=false

  immich-proxy:
    container_name: immich_proxy
    image: ghcr.io/immich-app/immich-proxy:release
    environment:
      # Make sure these values get passed through from the env file
      - IMMICH_SERVER_URL
      - IMMICH_WEB_URL
    ports:
      - 2283:8080
    logging:
      driver: none
    depends_on:
      - immich-server
    restart: always
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.immich.rule=Host(`immich.${DOMAIN}`)
      - traefik.http.routers.immich.entrypoints=websecure
      - traefik.http.routers.immich.tls.certresolver=cloudflare
      - traefik.http.services.immich.loadbalancer.server.port=8080
      - traefik.http.routers.immich.service=immich
      - com.centurylinklabs.watchtower.enable=false

networks:
  proxy:
    external: true